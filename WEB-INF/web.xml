<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/j2ee" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" id="WebApp_ID" version="2.4">
    <description>Web Application</description>
    <session-config>
        <session-timeout>35</session-timeout>
    </session-config>

    <context-param><!-- This sets the locale at global level. If you are not overriding locale using <fmt:setLocale> or programmatically using Config API, this locale will be used to render JSP -->
        <param-name>javax.servlet.jsp.jstl.fmt.locale</param-name>
        <param-value>es-MX</param-value>
    </context-param>

    <listener>
        <listener-class>gob.shcp.fsn.control.listener.SystemPropertyLog4jConfigListener</listener-class>
    </listener>
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    <context-param>
        <param-name>log4jExposeWebAppRoot</param-name>
        <param-value>false</param-value>
    </context-param>

    <listener>
        <listener-class>gob.shcp.fsn.control.listener.MultiContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>locatorFactorySelector</param-name><!-- specify how (classpath:|classpath*:) and where to find the applicationContext bean -->
        <param-value>classpath*:META-INF/beanRefContext.xml</param-value>
    </context-param>
    <context-param>
        <param-name>parentContextKey</param-name>
        <param-value>applicationContext</param-value><!-- bean id of type ClassPathXmlApplicationContext to instantiate for loading config files as APPROOT-PARENT -->
    </context-param>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>WEB-INF/webContext.xml</param-value><!-- empty value (could be use for listing config files that should be loading when instantiate XmlWebApplicationContext as WEBROOT-PARENT) -->
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class><!-- Bounds request to current Thread -->
    </listener>

    <filter>
        <filter-name>securityWebFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>securityWebFilter</filter-name>
        <url-pattern>*.do</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>securityWebFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>securityWebFilter</filter-name>
        <url-pattern>/REST/*</url-pattern>
    </filter-mapping>

    <!-- Spring Security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/REST/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>ResponseOverrideFilter</filter-name>
        <filter-class>org.displaytag.filter.ResponseOverrideFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>ResponseOverrideFilter</filter-name>
        <url-pattern>*.do</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>ResponseOverrideFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>sipa</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- It can accept contextConfigLocation & namespace for listing config files that should be loading when instantiate XmlWebApplicationContent as WEB-CHILD -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>sipa</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>sipa-vaadin</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- It can accept contextConfigLocation & namespace for listing config files that should be loading when instantiate XmlWebApplicationContent as WEB-CHILD -->
        <load-on-startup>2</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>sipa-vaadin</servlet-name>
        <url-pattern>/fsnVAADIN/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>exporter</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- It can accept contextConfigLocation & namespace for listing config files that should be loading when instantiate XmlWebApplicationContent as WEB-CHILD -->
        <load-on-startup>3</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>exporter</servlet-name>
        <url-pattern>/service/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>sipa-rest</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class><!-- It can accept contextConfigLocation & namespace for listing config files that should be loading when instantiate XmlWebApplicationContent as WEB-CHILD -->
        <load-on-startup>4</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>sipa-rest</servlet-name>
        <url-pattern>/REST/*</url-pattern>
    </servlet-mapping>

    <mime-mapping>
        <extension>html</extension>
        <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>txt</extension>
        <mime-type>text/plain</mime-type>
    </mime-mapping>

    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <scripting-invalid>true</scripting-invalid>
        </jsp-property-group>
    </jsp-config>

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>401</error-code>
        <location>/dispatchError.do?code=401</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/dispatchError.do?code=403</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/dispatchError.do?code=500</location>
    </error-page>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>All</web-resource-name>
            <url-pattern>*.do</url-pattern>
            <url-pattern>*.jsp</url-pattern>
            <url-pattern>/fsnVAADIN/*</url-pattern>
            <!-- <url-pattern>/REST/*</url-pattern> -->
        </web-resource-collection>
        <auth-constraint>
            <role-name>AUTH_USERS</role-name>
        </auth-constraint>
        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>
    <login-config>
        <auth-method>FORM</auth-method>
        <form-login-config>
            <form-login-page>/login.html</form-login-page>
            <form-error-page>/loginfail.html</form-error-page>
        </form-login-config>
    </login-config>
    <security-role>
        <role-name>AUTH_USERS</role-name>
    </security-role>
</web-app>
